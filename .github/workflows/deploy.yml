name: Deploy To EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Githun Repository 파일 불러오기
        uses: actions/checkout@4

      - name: JDK 17 setup
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: application.yml 파일 생성
        run: echo "${{ secrets.BE_APPLICATION_PROPERTIES }}" > ./src/main/resources/application.yml

      - name: test & build
        run: ./gradlew clean build
        env:
          KAKAO_CLIENT_ID: ${{ secrets.KAKAO_CLIENT_ID }}
          KAKAO_CLIENT_SECRET: ${{ secrets.KAKAO_CLIENT_SECRET }}
          NAVER_CLIENT_ID: ${{ secrets.NAVER_CLIENT_ID }}
          NAVER_CLIENT_SECRET: ${{ secrets.NAVER_CLIENT_SECRET }}
          MYSQL_URL: ${{ secrets.MYSQL_URL }}
          MYSQL_USERNAME: ${{ secrets.MYSQL_USERNAME }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
          MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}

      - name: AWS Resouce에 접근할 수 있게 AWS credentials 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-northeast-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: ECR LOGIN
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Docker Image
        run: docker build -t wero-server .

      - name: Docker Image Tag
        run: docker tag wero-server ${{ steps.login-ecr.registry }}/wero-server:latest

      - name: ECR Docker Image Push
        run: docker push ${{ steps.login-ecr.outputs.registry }}/wero-server:latest

      - name: SSH EC2 Connection
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script_stop: true
          script: |
            docker stop wero-server || true
            docker rm wero-server || true
            docker pull ${{ steps.login-ecr.outputs.registry }}/instagram-server:latest
            docker run -d --name wero-server -p 8080:8080 ${{ steps.login-ecr.outputs.registry }}/wero-server:latest




