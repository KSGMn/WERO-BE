name: Deploy To EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: GitHub Repository 파일 불러오기
        uses: actions/checkout@v4

      - name: JDK 17 setup
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: application.yml 파일 생성
        run: |
          echo "spring:
            security:
              oauth2:
                client:
                  registration:
                    kakao:
                      client-id: \${{ secrets.KAKAO_CLIENT_ID }}
                      client-secret: \${{ secrets.KAKAO_CLIENT_SECRET }}
                      redirect-uri: \"{baseUrl}/oauth2/callback/{registrationId}\"
                      authorization-grant-type: authorization_code
                      client-authentication-method: client_secret_post
                      scope: profile_nickname
                    naver:
                      client-id: \${{ secrets.NAVER_CLIENT_ID }}
                      client-secret: \${{ secrets.NAVER_CLIENT_SECRET }}
                      redirect-uri: \"{baseUrl}/oauth2/callback/{registrationId}\"
                      authorization-grant-type: authorization_code
                      scope: email
                  provider:
                    kakao:
                      authorization-uri: https://kauth.kakao.com/oauth/authorize
                      token-uri: https://kauth.kakao.com/oauth/token
                      user-info-uri: https://kapi.kakao.com/v2/user/me
                      user-name-attribute: id
                    naver:
                      authorization-uri: https://nid.naver.com/oauth2.0/authorize
                      token-uri: https://nid.naver.com/oauth2.0/token
                      user-info-uri: https://openapi.naver.com/v1/nid/me
                      user-name-attribute: response
            datasource:
              url: \${{ secrets.MYSQL_URL }}
              username: \${{ secrets.MYSQL_USERNAME }}
              password: \${{ secrets.MYSQL_PASSWORD }}
            jpa:
              hibernate:
                ddl-auto: update
              driver-class-name: com.mysql.cj.jdbc.Driver
              dialect: org.hibernate.dialect.MySQLDialect
            mail:
              host: smtp.gmail.com
              port: 587
              username: \${{ secrets.MAIL_USERNAME }}
              password: \${{ secrets.MAIL_PASSWORD }}
              properties:
                mail:
                  smtp:
                    auth: true
                    starttls.enable: true
          jwt:
            secret: \${{ secrets.JWT_SECRET }}
            token-validity-in-seconds: 86400
          " > ./src/main/resources/application.yml

      - name: test & build
        run: ./gradlew clean build

      - name: AWS Resource에 접근할 수 있게 AWS credentials 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-northeast-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: ECR LOGIN
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Docker Image
        run: docker build -t wero-server .

      - name: Docker Image Tag
        run: docker tag wero-server ${{ steps.login-ecr.registry }}/wero-server:latest

      - name: ECR Docker Image Push
        run: docker push ${{ steps.login-ecr.outputs.registry }}/wero-server:latest

      - name: SSH EC2 Connection
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script_stop: true
          script: |
            docker stop wero-server || true
            docker rm wero-server || true
            docker pull ${{ steps.login-ecr.outputs.registry }}/wero-server:latest
            docker run -d --name wero-server -p 8080:8080 ${{ steps.login-ecr.outputs.registry }}/wero-server:latest
