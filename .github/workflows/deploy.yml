name: Deploy To EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Github Repository 파일 불러오기
        uses: actions/checkout@v4

      - name: JDK 17버전 설치
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: application.yml 파일 만들기
        run: |
          echo "spring:" > ./src/main/resources/application.yml
          echo "  security:" >> ./src/main/resources/application.yml
          echo "    oauth2:" >> ./src/main/resources/application.yml
          echo "      client:" >> ./src/main/resources/application.yml
          echo "        registration:" >> ./src/main/resources/application.yml
          echo "          kakao:" >> ./src/main/resources/application.yml
          echo "            client-id: ${KAKAO_CLIENT_ID}" >> ./src/main/resources/application.yml
          echo "            client-secret: ${KAKAO_CLIENT_SECRET}" >> ./src/main/resources/application.yml
          echo "            redirect-uri: {baseUrl}/oauth2/callback/{registrationId}" >> ./src/main/resources/application.yml
          echo "            authorization-grant-type: authorization_code" >> ./src/main/resources/application.yml
          echo "            client-authentication-method: client_secret_post" >> ./src/main/resources/application.yml
          echo "            scope: profile_nickname" >> ./src/main/resources/application.yml
          echo "          naver:" >> ./src/main/resources/application.yml
          echo "            client-id: ${NAVER_CLIENT_ID}" >> ./src/main/resources/application.yml
          echo "            client-secret: ${NAVER_CLIENT_SECRET}" >> ./src/main/resources/application.yml
          echo "            redirect-uri: {baseUrl}/oauth2/callback/{registrationId}" >> ./src/main/resources/application.yml
          echo "            authorization-grant-type: authorization_code" >> ./src/main/resources/application.yml
          echo "            scope: email" >> ./src/main/resources/application.yml
          echo "        provider:" >> ./src/main/resources/application.yml
          echo "          kakao:" >> ./src/main/resources/application.yml
          echo "            authorization-uri: https://kauth.kakao.com/oauth/authorize" >> ./src/main/resources/application.yml
          echo "            token-uri: https://kauth.kakao.com/oauth/token" >> ./src/main/resources/application.yml
          echo "            user-info-uri: https://kapi.kakao.com/v2/user/me" >> ./src/main/resources/application.yml
          echo "            user-name-attribute: id" >> ./src/main/resources/application.yml
          echo "          naver:" >> ./src/main/resources/application.yml
          echo "            authorization-uri: https://nid.naver.com/oauth2.0/authorize" >> ./src/main/resources/application.yml
          echo "            token-uri: https://nid.naver.com/oauth2.0/token" >> ./src/main/resources/application.yml
          echo "            user-info-uri: https://openapi.naver.com/v1/nid/me" >> ./src/main/resources/application.yml
          echo "            user-name-attribute: response" >> ./src/main/resources/application.yml
          echo "  datasource:" >> ./src/main/resources/application.yml
          echo "    url: ${DB_URL}" >> ./src/main/resources/application.yml
          echo "    username: ${DB_USERNAME}" >> ./src/main/resources/application.yml
          echo "    password: ${DB_PASSWORD}" >> ./src/main/resources/application.yml
          echo "  jpa:" >> ./src/main/resources/application.yml
          echo "    hibernate:" >> ./src/main/resources/application.yml
          echo "      ddl-auto: update" >> ./src/main/resources/application.yml
          echo "    driver-class-name: com.mysql.cj.jdbc.Driver" >> ./src/main/resources/application.yml
          echo "    dialect: org.hibernate.dialect.MySQLDialect" >> ./src/main/resources/application.yml
          echo "  mail:" >> ./src/main/resources/application.yml
          echo "    host: smtp.gmail.com" >> ./src/main/resources/application.yml
          echo "    port: 587" >> ./src/main/resources/application.yml
          echo "    username: ${GMAIL_USERNAME}" >> ./src/main/resources/application.yml
          echo "    password: ${GMAIL_PASSWORD}" >> ./src/main/resources/application.yml
          echo "    properties:" >> ./src/main/resources/application.yml
          echo "      mail:" >> ./src/main/resources/application.yml
          echo "        smtp:" >> ./src/main/resources/application.yml
          echo "          auth: true" >> ./src/main/resources/application.yml
          echo "          starttls.enable: true" >> ./src/main/resources/application.yml
          echo "jwt:" >> ./src/main/resources/application.yml
          echo "  secret: ${JWT_SECRET}" >> ./src/main/resources/application.yml
          echo "  token-validity-in-seconds: 86400" >> ./src/main/resources/application.yml
          
      - name: 테스트 및 빌드하기
        run: ./gradlew clean build

      - name: 빌드된 파일 이름 변경하기
        run: mv ./build/libs/*SNAPSHOT.jar ./project.jar

      - name: SCP로 EC2에 빌드된 파일 전송하기
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: project.jar
          target: /home/ubuntu/wero-server/tobe

      - name: SSH로 EC2에 접속하기
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script_stop: true
          script: |
             rm -rf /home/ubuntu/wero-server/current
             mkdir /home/ubuntu/wero-server/current
             mv /home/ubuntu/wero-server/tobe/project.jar /home/ubuntu/wero-server/current/project.jar
             cd /home/ubuntu/wero-server/current
             sudo fuser -k -n tcp 8080 || true
             nohup java -jar project.jar > ./output.log 2>&1 & 
             rm -rf /home/ubuntu/wero-server/tobe
